-- JOIN --
-- 두개 이상의 테이블의 결과를 하나의 테이블 형태로 합쳐서 사용하는 명령 구문

-- 만약에 'J6'직급을 가진 사원들의 근무 부서명이 궁금하다
SELECT EMP_NAME, JOB_CODE , DEPT_CODE 
FROM EMPLOYEE
WHERE JOB_CODE = 'J6';

SELECT *
FROM DEPARTMENT 
WHERE DEPT_ID IN ('D1','D8');

-- 조인하고자 하는 테이블을 FROM 다음에
-- JOIN 테이블명 ON()|USING() 으로 작성해 하나로 합친다.
SELECT EMP_ID, EMP_NAME,JOB_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID);
-- EMPLOYEE 테이블에 DEPARTMENT 테이블을 JOIN한다.
-- EMPLOYEE의 DEPTCODE와 DEPARTMENT의 DEPT_ID가 같은 것끼리 합친다.


SELECT EMP_ID, EMP_NAME,JOB_CODE, DEPT_TITLE, LOCATION_ID 
FROM EMPLOYEE
-- JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
JOIN DEPARTMENT ON(EMPLOYEE.DEPT_CODE = DEPARTMENT.DEPT_ID)
WHERE JOB_CODE = 'J6';

-- ORACLE 문법
-- FROM 구문에 , 로 구문하여 합치게 될 테이블을 나열하고
-- WHERE 절에 합칠 테이블들의 공통사항을 작성하며 조건을 나열한다.

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE 
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID;


-- 컬럼명이 동일할 때
SELECT * FROM EMPLOYEE;
SELECT * FROM JOB;

SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE
JOIN JOB ON (EMPLOYEE.JOB_CODE=JOB.JOB_CODE);

SELECT EMP_ID, EMP_NAME, E.JOB_CODE, JOB_NAME
FROM EMPLOYEE E
JOIN JOB J ON (E.JOB_CODE=J.JOB_CODE);

SELECT *
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE);

SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE;


-- DEPARTMENT 테이블의 위치정보와
-- LOCATION 테이블을 조인하여
-- 각 부서별 근무지 위치를 조회
-- 부서코드, 부서명, 근무지 코드, 근무지 위치(LOCAL_NAME)

-- 연결하고자 하는 테이블 정보
SELECT * FROM DEPARTMENT;
SELECT * FROM LOCATION;


SELECT DEPT_ID, DEPT_TITLE, LOCATION_ID, LOCAL_NAME
FROM DEPARTMENT
JOIN LOCATION ON(LOCATION_ID=LOCAL_CODE);

SELECT DEPT_ID, DEPT_TITLE, LOCATION_ID, LOCAL_NAME
FROM DEPARTMENT, LOCATION
WHERE LOCATION_ID = LOCAL_CODE;



-- INNER JOIN / OUTER JOIN
-- 테이블을 JOIN 통해 하나로 합칠때
-- INNER JOIN은 둘 모두 일치하는 데이터만 합치고,
-- OUTER JOIN 둘 중 하나, 혹은 둘 모두가 가진 데이터들을 합친다.

-- INNERJOIN
-- JOIN을 했을때 EMPLOYEE테이블 DEPT_CODE컬럼에 NULL인 데이터는 사라진다.
SELECT DISTINCT DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
ORDER BY 1;

SELECT DISTINCT DEPT_CODE 
FROM EMPLOYEE
ORDER BY 1;

-- OUTER JOIN --
-- LEFT [OUTER] JOIN : 두 테이블 중 원본 테이블의 정보를 모두 포함하여 조회할 때 선언
-- RIGHT [OUTER] JOIN : 두 테이블 중 JOIN에 명시한 테이블의 정보를 모두 포함하여 조회할 때 선언
-- FULL [OUTER] JOIN : 두 테이블이 가진 데이터 중 서로가 가지지 않은 값일 지라도 모두 포함한 조회
 
SELECT DEPT_CODE, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);


-- LEFT JOIN
SELECT DEPT_CODE, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT *
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);


-- RIGHT JOIN
SELECT DEPT_CODE, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
RIGHT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT *
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);


-- FULL JOIN
SELECT DEPT_CODE, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);


-- ON() 안에 들어가는 형식이 컬럼 뿐만 아니라
-- 계산식, 함수식, AND, OR 조건식 등을 다양하게 넣을 수 있다.

-- NON-EQUAL JOIN
-- 지정한 컬럼 값 자체가 아닌 특정 범위 내에 존재하는 조건으로 JOIN을 수행
SELECT EMP_NAME, DEPT_CODE, SALARY, EMPLOYEE.SAL_LEVEL 
FROM EMPLOYEE
JOIN SAL_GRADE ON(SALARY BETWEEN MIN_SAL AND MAX_SAL);

-- SELF JOIN --
-- 자기 자신을 조인하는 방법

-- 직원의 정보와 그 직원을 관리하는 매니저의 정보를 조회
SELECT E.EMP_ID "사원",
	   E.EMP_NAME "사원명",
	   E.MANAGER_ID "관리자 사번",
	   M.EMP_NAME "관리자명",
	   M.PHONE "관리자 전화번호"
FROM EMPLOYEE E
JOIN EMPLOYEE M ON(E.MANAGER_ID = M.EMP_ID);

-- 다중 JOIN --
-- 여러 개의 테이블을 JOIN
-- 앞서 조인한 결과를 기준으로 이후에 조인할 테이블을 연결
-- 조인 순서에 주의

SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;
SELECT * FROM LOCATION;

SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
JOIN LOCATION ON(LOCATION_ID=LOCAL_CODE);


-- 직급이 대리 이면서 아시아 지역에서 근무하는 시원조회
-- 사번, 사원명, 직급명, 부서명, 근무지역명, 급여
-- ON(A=B AND C='대리')
SELECT EMP_ID ,EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY 
FROM EMPLOYEE E
JOIN JOB J ON(E.JOB_CODE=J.JOB_CODE)
JOIN DEPARTMENT D ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION L ON(LOCATION_ID = LOCAL_CODE)
WHERE JOB_NAME = '대리' AND LOCAL_NAME LIKE 'ASIA%';




